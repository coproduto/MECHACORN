<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///declaration of Character's variables

//directions
Movable_Facing = 0; //the head is looking at that direction (Up/Down/Left/Right)
Movable_Side = 0; //the body is facing that direction (Left/Right)

//constants
Movable_Height = Tile_Size;
Movable_Width = Tile_Size;
Movable_Jump_Speed = 0;
Movable_Bullet_Delay = 0;
Movable_Bullet_Speed = 0;
Movable_Bullet_Deviation = 0;
Movable_Obj_Tiro = Obj_Tiro;

//Bullets start position
Scr_Set_Default_Gun_Pos(self);

//counter of frames to the next shoot
Movable_Gun_Delay = 0; //if zero, you can shoot

//Will variable
Movable_Want_Fall = 0; //if one, you'll pass through an Obj_Plataform_Transp

//control input
Control_Horizontal = 0;
Control_Vertical = 0;
Control_Shoot = 0;
Control_Jump = 0;

//Character Speed
Movable_H_Speed = 0;
Movable_V_Speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move character

//vertical movement

var over_Plataform_Transp;
if Scr_Colision_Plataform_Transp(x, y+1, Movable_Width) //collision with Obj_Plataform_Transp
{
    over_Plataform_Transp = 1;
    if Movable_V_Speed == 0 &amp;&amp; Control_Vertical == 1 &amp;&amp; Control_Jump == 1 //want to go down
    {
        Movable_Want_Fall = 1; //condition to pass throug an Obj_Plataform_Transp
    }
    else if Scr_Colision_Plataform_Transp(x, y, Movable_Width) //it's inside an Obj_Plataform_Transp
    {
        Movable_Want_Fall = 1;
    }
}
else //don't hava the conditions to pass throug an Obj_Plataform_Transp
{
    over_Plataform_Transp = 0;
    Movable_Want_Fall = 0;
}

if place_free(x,y+1) &amp;&amp; (Movable_Want_Fall == 1 || over_Plataform_Transp == 0) //Character is aerial
{
    Movable_V_Speed += World_Gravity;
    
    if Movable_V_Speed &gt; World_Fall_Max //terminal speed
    {
        Movable_V_Speed = World_Fall_Max;
    }
}
else //Character is on ground
{
    if Movable_V_Speed == 0 &amp;&amp; Control_Jump == 1 //jump
    {
        Movable_V_Speed = -Movable_Jump_Speed;
    }
    else
    {
       Movable_V_Speed = 0;
    }
}

if Movable_V_Speed &gt; 0 //moving down
{
    if Movable_Want_Fall == 1 //want to fall throug a Plataform_Transp
    {
        move_contact_solid(270, Movable_V_Speed);
    }
    else if Scr_Colision_Plataform_Transp(x, y+Movable_V_Speed, Movable_Width) == 0 //Won't collide with an Obj_Plataform_Transp
    {
        move_contact_solid(270, Movable_V_Speed);
    }
    else //May collide with an Obj_Plataform_Transp
    {
        var i = 1;
        while (i &lt; Movable_V_Speed &amp;&amp; Scr_Colision_Plataform_Transp(x, y+i ,Movable_Width) == 0)
        {
            i += 1;
        }
        move_contact_solid(270, i-1);
    }
}
else if Movable_V_Speed &lt; 0 //moving up
{
    if place_free(x,y-1)
    {
        move_contact_solid(90, -Movable_V_Speed);
    }
    else //hit a plataform from bellow
    {
        Movable_V_Speed = 0;   
    }
}

//defines the direction that the Character's body is facing &amp; Horizontal moviment
switch (Control_Horizontal)
{
    case -1: //move left
        Movable_Side = 180;
        move_contact_solid(180,Movable_H_Speed);
        break;
    case 1: //move right
        Movable_Side = 0;
        move_contact_solid(0,Movable_H_Speed);
        break;
    //default: don't change the direction
}

switch (Control_Vertical) //defines the direction that the Character's head is facing
{
    case -1: //look up
        Movable_Facing = 90;
        break;
    case 1: //look down
        Movable_Facing = 270;
        break;
    default: //look foward
        Movable_Facing = Movable_Side;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shoot with gun

//weapon cooldown
if (Movable_Gun_Delay &gt; 0)
{
    Movable_Gun_Delay -= 1;
}

//if want (and can) shoot
if(Control_Shoot == 1 &amp;&amp; Movable_Gun_Delay == 0)
{
    var index = Movable_Facing/90;

    //calculates a random deviation so it won't be a perfect stream
    var deviation = random_range(-Movable_Bullet_Deviation, Movable_Bullet_Deviation);
    
    pos_x = x+Movable_Gun_X[index];
    pos_y = y+Movable_Gun_Y[index];
    
    if (index == 0 || index == 2)
    {
        pos_y += deviation;
    }
    else
    {
        pos_x += deviation;
    }
    
    //create's the bullet
    var tiro = instance_create(pos_x,pos_y, Movable_Obj_Tiro);
    tiro.direction = Movable_Facing;
    tiro.speed = Movable_Bullet_Speed;
    Movable_Gun_Delay = Movable_Bullet_Delay;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset control variables
Control_Horizontal = 0;
Control_Vertical = 0;
Control_Shoot = 0;
Control_Jump = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
